@import "globals.cocoascript";
@import "MochaJSDelegate.js";
@import "./webview/webview.cocoascript";

var onRun = function(context) {
    var sketch = context.api();
    var app = [NSApplication sharedApplication];
    var layers = sketch.selectedDocument.selectedLayers;
    //var filepath = "/Users/Young/Documents/pixelcode/app/tests/";
    var filepath = globals.filepath;
    //var data = request("http://localhost:3000/test")
    //log(JSON.parse(data))
    var application = new sketch.Application(context);

    // for (var key in application.Application) {
    //     if (Object.prototype.hasOwnProperty.call(application.Application, key)) {
    //         log(key);
    //         var val = application.Application[key];
    //         log(val);
    //         // use val
    //     }
    // }
    log("begins here:");
    log(application.settingForKey("token"));
    // application.setSettingForKey("token", null);
    if (application.settingForKey("token") == null) {
      var window_ = createWindow();
      var webView = createWebView(context, window_, 'index.html');
      // createWebViewRedirectDelegate(application, context, webView);
      createWebViewChangeLocationDelegate(application, context, webView);

      [NSApp run];
      return;
    }

    log("Exporting now:")
    if (layers.isEmpty) {
      context.document.showMessage("PixelCode: No artboard selected.");
    } else {
      // UNCOMMENT THE FOLLOWING CODE:
      // var projects = getProjects(application.settingForKey("token"));
      // createProjectsJSFile(projects);
      // log(projects);
      // log("created projects.js");
      var window_ = createWindow();
      var webView = createWebView(context, window_, 'export.html');
      [NSApp run];
      return;
    }
    // if (layers.isEmpty) {
    //     context.document.showMessage("PixelCode: No artboard selected.");
    // }
    // else {
    //     layers.iterate(function(layer) {
    //         if (layer.isArtboard) {
    //             output = exportJSON(layer, filepath);
    //
    //             var options = {
    //                 "scales" : "1",
    //                 "formats" : "svg",
    //                 "overwriting" : "true",
    //                 "output": filepath
    //             };
    //             layer.export(options);
    //             layer.iterate(function(currentLayer) {
    //                 renameLayers(currentLayer, output["originalNames"]);
    //             });
    //             context.document.showMessage("Pixelcode: Export finished!");
    //         } else {
    //             context.document.showMessage("Pixelcode: No artboard selected.");
    //         }
    //     });
    // };
};

function renameLayers(layer, originalNames) {
  layer.name = originalNames[layer.id];
  if (layer.isGroup) {
    layer.iterate(function(subLayer) {
      renameLayers(subLayer, originalNames);
    });
  }
}

function exportJSON(artboard, filepath){
    var layerArray = [];
    var ret = { "layerNames": [], "dictList": [] , "originalNames": {} };

    artboard.iterate(function(layer) {
        if (layer.isImage) {
            var options = {
                "scales" : "1",
                "formats" : "png",
                "overwriting" : "true",
                "output": filepath
            };
            layer.export(options);
        }

        output = checkFormatting(layer, ret["layerNames"], ret["originalNames"]);
        ret = output;

        for (var i = 0; i < ret["dictList"].length; i++) {
            layerArray.push(ret["dictList"][i]);
        }
    });

    // Create JSON and save to file
    artboardName = artboard.name;
    var jsonObj = { layers : layerArray };
    var file = NSString.stringWithString(JSON.stringify(jsonObj, null, "\t"));
    [file writeToFile:filepath+artboardName+".json" atomically:true encoding:NSUTF8StringEncoding error:null];
    return ret;
}

// Account for sublayers in checking formatting
function checkFormatting(layer, layerNames, originalNames) {
    var ret = {"layerNames": layerNames, "dictList": [],
               "originalNames": originalNames};
    var stack = [layer];

    while (stack.length >= 1) {
        var currentLayer = stack.pop();
        var originalName = String(currentLayer.name);
        ret["originalNames"][currentLayer.id] = originalName;

        layerName = String(currentLayer.name.replace(/\s+/, ""));
        layerName = lowerCaseFirstChar(layerName);

        if (arrayContains(layerName, ret["layerNames"])) {
          var name = layerName;
          var counter = 1;
          while (arrayContains(name, ret["layerNames"])) {
            name = layerName + counter;
            counter++;
          }
          layerName = name;
        }

        currentLayer.name = layerName;

        var currentDict = {};
        currentDict["originalName"] = originalName;
        currentDict["name"] = layerName;
        currentDict["x"] = String(currentLayer.frame.x);
        currentDict["y"] = String(currentLayer.frame.y);
        currentDict["height"] = String(currentLayer.frame.height);
        currentDict["width"] = String(currentLayer.frame.width);
        if (currentLayer.isText) currentDict["text_align"] = String(currentLayer.alignment);

        if (currentLayer.container.isArtboard) {
          currentDict["abs_x"] = currentDict["x"];
          currentDict["abs_y"] = currentDict["y"];
        } else {
          var absx = String(currentLayer.frame.x + currentLayer.container.frame.x);
          var absy = String(currentLayer.frame.y + currentLayer.container.frame.y);
          currentDict["abs_x"] = absx;
          currentDict["abs_y"] = absy;
        }

        ret["layerNames"].push(layerName);
        ret["dictList"].push(currentDict);

        if (currentLayer.isGroup) {
            currentLayer.iterate(function(subLayer) {
                stack.push(subLayer);
            });
        }
    }
    return ret;
}

function hasWhiteSpace(s) {
    return s.indexOf(' ') >= 0;
}

function arrayContains(needle, arrhaystack) {
    return (arrhaystack.indexOf(needle) > -1);
}

function lowerCaseFirstChar(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}
